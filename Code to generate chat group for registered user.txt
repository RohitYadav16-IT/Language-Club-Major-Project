Code to generate chat group for registered users :- 

#include <iostream>
#include <string>
#include <vector>

using namespace std;

// Define a User class to store user information
class User {
public:
    string username;
    string password;
    User(string username, string password) {
        this->username = username;
        this->password = password;
    }
};

// Define a ChatGroup class to represent a chat group
class ChatGroup {
public:
    string groupName;
    vector<User> users;
    ChatGroup(string groupName) {
        this->groupName = groupName;
    }
    void addUser(User user) {
        users.push_back(user);
    }
};

// Define a UserDatabase class to store and manage registered users
class UserDatabase {
public:
    vector<User> users;
    void registerUser(string username, string password) {
        users.push_back(User(username, password));
    }
    User* findUser(string username, string password) {
        for (int i = 0; i < users.size(); i++) {
            if (users[i].username == username && users[i].password == password) {
                return &users[i];
            }
        }
        return nullptr;
    }
};

int main() {
    UserDatabase userDB;
    ChatGroup chatGroup("My Chat Group");

    // Register some users
    userDB.registerUser("user1", "password1");
    userDB.registerUser("user2", "password2");
    userDB.registerUser("user3", "password3");

    // Add some users to the chat group
    User* user1 = userDB.findUser("user1", "password1");
    User* user2 = userDB.findUser("user2", "password2");
    User* user3 = userDB.findUser("user3", "password3");
    chatGroup.addUser(*user1);
    chatGroup.addUser(*user2);
    chatGroup.addUser(*user3);

    // Print the chat group members
    cout << "Chat group: " << chatGroup.groupName << endl;
    for (int i = 0; i < chatGroup.users.size(); i++) {
        cout << chatGroup.users[i].username << endl;
    }

    return 0;
}


This code creates a User class to store user information, a ChatGroup class to represent a chat group, and a UserDatabase class to manage registered users. It also demonstrates how to register users, find users by username and password